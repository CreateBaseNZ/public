[
	{
		"robot": "Arm",
		"startingCode": "",
		"sensors": {},
		"actions": {},
		"functions": {
			"NodeStart": {
				"simpleLogic": "await InitialiseRobot();",
				"inputs": [],
				"logic": "",
				"await": false
			},
			"NodeEnd": {
				"simpleLogic": "",
				"inputs": [],
				"logic": "",
				"await": false
			},
			"NodeMagnebotMoveArm": {
				"inputs": [
					{ "variable": "x", "type": "number", "value": 0 },
					{ "variable": "y", "type": "number", "value": 0 },
					{ "variable": "z", "type": "number", "value": 0 }
				],
				"logic": "MoveArmAlgorithm(x, y, z);",
				"simpleLogic": "MoveArm",
				"await": true
			},
			"NodeMagnebotSwitch": {
				"inputs": [{ "variable": "a", "type": "boolean", "value": true }],
				"logic": "MagneticSwitchAlgorithm();",
				"simpleLogic": "MagneticSwitch",
				"await": true
			}
		}
	},
	{
		"robot": "Player",
		"startingCode": "",
		"sensors": {
			"NodeSendItSpeedOf": {
				"name": "obstacleSpeed",
				"simpleName": "Speed"
			},
			"NodeSendItDistance": {
				"name": "obstacleDistance.x",
				"simpleName": "Distance"
			},
			"NodeSendItElevationOf": {
				"name": "obstacleDistance.y",
				"simpleName": "Elevation"
			},
			"NodeSendItWidthOf": {
				"name": "obstacleSize.x",
				"simpleName": "Width"
			},
			"NodeSendItHeightOf": {
				"name": "obstacleSize.y",
				"simpleName": "Height"
			}
		},
		"actions": {
			"NodeSendItJump": {
				"inputs": [],
				"syntaxSimple": "Jump",
				"syntax": "unityContext.send(\"Player\",\"Jump\");"
			},
			"NodeSendItCrouch": {
				"inputs": [],
				"syntaxSimple": "Crouch",
				"syntax": "unityContext.send(\"Player\",\"Crouch\");"
			}
		},
		"functions": {
			"NodeStart": {
				"simpleLogic": "while(gameIsON){",
				"inputs": [],
				"logic": "if(sensorData){\n",
				"await": false
			},
			"NodeEnd": {
				"simpleLogic": "}",
				"inputs": [],
				"logic": "}",
				"await": false
			}
		}
	},
	{
		"robot": "Car",
		"startingCode": "unityContext.send(\"LeftWheel\", \"StopMotor\")\nunityContext.send(\"RightWheel\", \"StopMotor\")\nunityContext.send(\"SceneController\",\"ResetScene\")",
		"sensors": {
			"NodeHeatSeekerLeftSensor": {
				"name": "leftLineSensor",
				"simpleName": "leftLineSensor"
			},
			"NodeHeatSeekerRightSensor": {
				"name": "rightLineSensor",
				"simpleName": "rightLineSensor"
			},
			"NodeHeatSeekerMiddleSensor": {
				"name": "middleLineSensor",
				"simpleName": "middleLineSensor"
			},
			"NodeHeatSeekerFireSensor": {
				"name": "fireDetectionSensor",
				"simpleName": "fireDetectionSensor"
			}
		},
		"actions": {},
		"functions": {
			"NodeStart": {
				"simpleLogic": "while(gameIsON){",
				"inputs": [],
				"logic": "if(sensorData){\n",
				"await": false
			},
			"NodeHeatSeekerLeftWheel": {
				"simpleLogic": "LeftWheel",
				"inputs": [{ "variable": "a", "type": "number", "value": true }],
				"logic": "if(a==0){\nunityContext.send(\"LeftWheel\", \"StopMotor\")\n}else if(a>0){\nunityContext.send(\"LeftWheel\", \"RotateMotorForwards\", a)\n}else{\nunityContext.send(\"LeftWheel\", \"RotateMotorBackwards\", -a)\n}",
				"await": false
			},

			"NodeHeatSeekerRightWheel": {
				"simpleLogic": "RightWheel",
				"inputs": [{ "variable": "a", "type": "number", "value": 0 }],
				"logic": "if(a==0){\nunityContext.send(\"RightWheel\", \"StopMotor\")\n}else if(a>0){\nunityContext.send(\"RightWheel\", \"RotateMotorForwards\", a)\n}else{\nunityContext.send(\"RightWheel\", \"RotateMotorBackwards\", -a)\n}",
				"await": false
			},
			"NodeHeatSeekerWaterHose": {
				"simpleLogic": "WaterHose",
				"inputs": [{ "variable": "a", "type": "boolean", "value": true }],
				"logic": "if(a){\nunityContext.send(\"WaterHose\", \"TurnOnWater\")\n}else{\nunityContext.send(\"WaterHose\", \"TurnOffWater\")\n}",
				"await": false
			},
			"NodeHeatSeekerRobotOnLine": {
				"simpleLogic": "RobotOnLine",
				"output": { "variable": "out" },
				"inputs": [],
				"logic": "return !((JSON.parse(sensorDataRef.current).rightLineSensor<0.1) && (JSON.parse(sensorDataRef.current).leftLineSensor<0.1))",
				"await": false
			},
			"NodeHeatSeekerFrontOnLine": {
				"simpleLogic": "FrontOnLine",
				"output": { "variable": "out" },
				"inputs": [],
				"logic": "return (JSON.parse(sensorDataRef.current).middleLineSensor>0.95)",
				"await": false
			},
			"NodeHeatSeekerIsFireNear": {
				"simpleLogic": "IsFireNear",
				"output": { "variable": "out" },
				"inputs": [],
				"logic": "return (JSON.parse(sensorDataRef.current).fireDetectionSensor>0.5)",
				"await": false
			},
			"NodeHeatSeekerDifference": {
				"simpleLogic": "Difference",
				"output": { "variable": "out" },
				"inputs": [],
				"logic": "return (JSON.parse(sensorDataRef.current).rightLineSensor-JSON.parse(sensorDataRef.current).leftLineSensor)",
				"await": false
			},
			"NodeHeatSeekerMoveForward": {
				"simpleLogic": "MoveForward",
				"inputs": [{ "variable": "a", "type": "number", "value": 0 }],
				"logic": "unityContext.send(\"LeftWheel\", \"RotateMotorForwards\", 0.33+a)\nunityContext.send(\"RightWheel\", \"RotateMotorForwards\", 0.33-a)",
				"await": false
			},
			"NodeHeatSeekerTurn": {
				"simpleLogic": "Turn",
				"inputs": [{ "variable": "a", "type": "boolean", "value": 0 }],
				"logic": "if(a){\nunityContext.send(\"LeftWheel\", \"RotateMotorForwards\", 0.33)\nunityContext.send(\"RightWheel\", \"RotateMotorBackwards\", 0.33)}else{\nunityContext.send(\"LeftWheel\", \"RotateMotorBackwards\", 0.33)\nunityContext.send(\"RightWheel\", \"RotateMotorForwards\", 0.33)\n}",
				"await": false
			},
			"NodeHeatSeekerStop": {
				"simpleLogic": "Stop",
				"inputs": [],
				"logic": "unityContext.send(\"LeftWheel\", \"StopMotor\")\nunityContext.send(\"RightWheel\", \"StopMotor\")",
				"await": false
			},
			"NodeHeatSeekerMoveBackward": {
				"simpleLogic": "MoveBackward",
				"inputs": [{ "variable": "a", "type": "number", "value": 0 }],
				"logic": "unityContext.send(\"LeftWheel\", \"RotateMotorBackwards\", 0.33-a)\nunityContext.send(\"RightWheel\", \"RotateMotorBackwards\", 0.33+a)",
				"await": false
			},
			"NodeEnd": {
				"simpleLogic": "}",
				"inputs": [],
				"logic": "}",
				"await": false
			}
		}
	},
	{
		"robot": "aimbot",
		"startingCode": "",
		"sensors": {
			"NodeAimBotGetYawAngle": {
				"name": "yawSensor",
				"simpleName": "yaw"
			},
			"NodeAimBotGetPitchAngle": {
				"name": "pitchSensor",
				"simpleName": "pitch"
			},
			"NodeAimBotGetMosquitoXPos": {
				"name": "enemyPosition.x",
				"simpleName": "xPos"
			},
			"NodeAimBotGetMosquitoYPos": {
				"name": "enemyPosition.y",
				"simpleName": "yPos"
			},
			"NodeAimBotGetMosquitoZPos": {
				"name": "enemyPosition.z",
				"simpleName": "zPos"
			}
		},
		"actions": {
			"NodeAimBotShoot": {
				"inputs": [],
				"syntaxSimple": "shoot",
				"syntax": "unityContext.send(\"Weapon\",\"Shoot\");"
			}
		},
		"functions": {
			"NodeStart": {
				"simpleLogic": "",
				"inputs": [],
				"logic": "",
				"await": false
			},
			"NodeAimBotSetYawSpeed": {
				"simpleLogic": "yawSpeed",
				"inputs": [{ "variable": "a", "type": "number", "value": 3 }],
				"logic": "unityContext.send(\"Weapon\", \"SetYawVelocity\", a);",
				"await": false
			},
			"NodeAimBotSetPitchSpeed": {
				"simpleLogic": "pitchSpeed",
				"inputs": [{ "variable": "a", "type": "number", "value": 0 }],
				"logic": "unityContext.send(\"Weapon\", \"SetPitchVelocity\", a);",
				"await": false
			},
			"NodeAimBotGetCurrentYawSpeed": {
				"simpleLogic": "getCurrentYawSpeed",
				"output": { "variable": "out" },
				"inputs": [],
				"logic": "return m.currentYawSpeed",
				"await": false
			},
			"NodeAimBotGetCurrentPitchSpeed": {
				"simpleLogic": "getCurrentPitchSpeed",
				"output": { "variable": "out" },
				"inputs": [],
				"logic": "return m.currentPitchSpeed",
				"await": false
			},
			"NodeAimBotSetCurrentYawSpeed": {
				"simpleLogic": "setCurrentYawSpeed",
				"inputs": [{ "variable": "a", "type": "number", "value": 0 }],
				"logic": "return m.currentYawSpeed = a;",
				"await": false
			},
			"NodeAimBotSetCurrentPitchSpeed": {
				"simpleLogic": "setCurrentPitchSpeed",
				"inputs": [{ "variable": "a", "type": "number", "value": 0 }],
				"logic": "return m.currentPitchSpeed = a;",
				"await": false
			},
			"NodeEnd": {
				"simpleLogic": "",
				"inputs": [],
				"logic": "",
				"await": false
			}
		}
	},
	{
		"mathOps": {
			"NodeAdd": "+",
			"NodeSubtract": "-",
			"NodeMultiply": "*",
			"NodeDivide": "/",
			"NodeGreaterThan": ">",
			"NodeLessThan": "<",
			"NodeEquals": "==",
			"NodeNotEquals": "!=",
			"NodeAnd": "&&",
			"NodeOr": "||",
			"NodePower": "^^"
		},
		"general": ["NodeIf", "intialise", "NodeCompare", "NodeWhile", "NodeFor", "num", "NodeRepeat", "NodeOperatorGeneral", "NodePrint", "NodeAbsolute", "NodeArcTan", "NodePI", "NodeSqrt", "NodeClamp"],
		"functions": {
			"NodeDelay": {
				"simpleLogic": "Delay",
				"inputs": [{ "variable": "a", "type": "number", "value": 0 }],
				"logic": "setTimeout(resolve, a*1000);",
				"await": true
			},
			"NodeNot": {
				"simpleLogic": "Not",
				"output": { "variable": "out" },
				"inputs": [{ "variable": "a", "type": "boolean", "value": 0 }],
				"logic": "return !a;",
				"await": false
			}
		}
	}
]
